{"version":3,"sources":["redux/todoSlice.js","components/AddTodoForm.js","components/TodoItem.js","components/TodoList.js","components/TotalCompleteItems.js","App.js","redux/store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","id","title","completed","reducers","addToDo","state","action","newTodo","Date","now","payload","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","actions","AddTodoForm","useState","value","setValue","dispatch","useDispatch","onSubmit","event","preventDefault","console","log","className","type","placeholder","onChange","target","TodoItem","checked","onClick","TodoList","todos","useSelector","map","TotalCompleteItems","completedTodos","length","App","configureStore","reducer","todoReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"+MACMA,EAAYC,YAAY,CAC5BC,KAAM,QACNC,aAAc,CACZ,CAAEC,GAAI,EAAGC,MAAO,OAAQC,WAAW,GACnC,CAAEF,GAAI,EAAGC,MAAO,OAAQC,WAAW,GACnC,CAAEF,GAAI,EAAGC,MAAO,mBAAoBC,WAAW,GAC/C,CAAEF,GAAI,EAAGC,MAAO,iBAAkBC,WAAW,IAE/CC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACf,IAAMC,EAAU,CACdP,GAAIQ,KAAKC,MACTR,MAAOK,EAAOI,QAAQT,MACtBC,WAAW,GAEbG,EAAMM,KAAKJ,IAGbK,eAAgB,SAACP,EAAOC,GACtB,IAAMO,EAAQR,EAAMS,WAAU,SAACC,GAAD,OAAUA,EAAKf,KAAOM,EAAOI,QAAQV,MACnEK,EAAMQ,GAAOX,UAAYI,EAAOI,QAAQR,WAE1Cc,WAAY,SAACX,EAAOC,GAGlB,OAAOD,EAAMY,QAAO,SAACF,GAAD,OAAUA,EAAKf,KAAOM,EAAOI,QAAQV,U,EASRJ,EAAUsB,QAAlDd,E,EAAAA,QAASQ,E,EAAAA,eAAgBI,E,EAAAA,WACzBpB,IAAf,Q,OCJeuB,EA7BK,WAAO,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAEnBC,EAASC,cASf,OACC,uBAAMC,SATU,SAACC,GACjBA,EAAMC,iBACNJ,EAASnB,EAAQ,CAChBH,MAAMoB,KAEPO,QAAQC,IAAI,iBAAmBR,IAILS,UAAU,wBAApC,UACC,uBAAOA,UAAU,UAAjB,kBACA,uBACCC,KAAK,OACLD,UAAU,4BACVE,YAAY,cACZX,MAAOA,EACPY,SAAU,SAACP,GAAD,OAAWJ,EAASI,EAAMQ,OAAOb,UAG5C,wBAAQU,KAAK,SAASD,UAAU,uBAAhC,wBCSYK,EA/BE,SAAC,GAA8B,IAA5BnC,EAA2B,EAA3BA,GAAIC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAGxBqB,EAASC,cAWf,OACC,oBAAIM,UAAS,0BAAqB5B,GAAa,2BAA/C,SACC,sBAAK4B,UAAU,iCAAf,UACC,uBAAMA,UAAU,4BAAhB,UACC,uBAAOC,KAAK,WAAWD,UAAU,OAAOM,QAASlC,EACjD+B,SAZsB,WAGzBV,EACCX,EAAe,CAACZ,GAAGA,EAAIE,WAAWA,GAAY0B,QAAQC,IAAI,gBAAgB3B,QAUvED,KAEF,wBAAQ6B,UAAU,iBAClBO,QApBqB,WACvBd,EAASP,EAAW,CAAChB,GAAGA,MAkBtB,0BCNWsC,EAZE,WAChB,IAAMC,EAAMC,aAAY,SAACnC,GAAD,OAASA,EAAMkC,SAEvC,OACC,oBAAIT,UAAU,aAAd,SACES,EAAME,KAAI,SAAC1B,GAAD,OACV,cAAC,EAAD,CAAUf,GAAIe,EAAKf,GAAIC,MAAOc,EAAKd,MAAOC,UAAWa,EAAKb,kBCH/CwC,EATY,WACzB,IAAMC,EAAiBH,aAAY,SAACnC,GAAD,OACjCA,EAAMkC,MAAMtB,QAAO,SAACF,GAAD,OAA6B,IAAnBA,EAAKb,gBAEpC,OACE,qBAAI4B,UAAU,OAAd,mCAA4Ca,EAAeC,WCUhDC,EAXH,WACX,OACC,sBAAKf,UAAU,8BAAf,UACC,8CACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCVYgB,cAAe,CAE1BC,QAAQ,CACJR,MAAMS,KCEdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.48e4156f.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [\r\n    { id: 1, title: \"OOPs\", completed: false },\r\n    { id: 2, title: \"DBMS\", completed: true },\r\n    { id: 3, title: \"Operating System\", completed: true },\r\n    { id: 4, title: \"Daily Leetcode\", completed: false },\r\n  ],\r\n  reducers: {\r\n    addToDo: (state, action) => {\r\n      const newTodo = {\r\n        id: Date.now(),\r\n        title: action.payload.title,\r\n        completed: false,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    // a reducer handles the action accepting the current state and the action and returns some new state\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id); //this is used to find the id of the todo which we want to update\r\n      state[index].completed = action.payload.completed; //redux updates the state our selector will detect the change and re-render any component\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      // the filter function will give us back all the todo's that don't equal the id in the payload\r\n      // we will return it because it will return us a new array\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n    // extra reducers that can be used by thunk as thunk will dispatch a number of actions\r\n  },\r\n  \r\n});\r\n\r\n//we are exporting the actions example for toggleComplete reducer we have toggleComplete action\r\n// associated with it\r\nexport const { addToDo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addToDo } from '../redux/todoSlice';\r\nconst AddTodoForm = () => {\r\n\tconst [value, setValue] = useState('');\r\n\tconst dispatch=useDispatch();\r\n\tconst onSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tdispatch(addToDo({\r\n\t\t\ttitle:value, \r\n\t\t}))\r\n\t\tconsole.log('user entered: ' + value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={onSubmit} className='form-inline mt-3 mb-3'>\r\n\t\t\t<label className='sr-only'>Name</label>\r\n\t\t\t<input\r\n\t\t\t\ttype='text'\r\n\t\t\t\tclassName='form-control mb-2 mr-sm-2'\r\n\t\t\t\tplaceholder='Add todo...'\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={(event) => setValue(event.target.value)}\r\n\t\t\t></input>\r\n\r\n\t\t\t<button type='submit' className='btn btn-primary mb-2'>\r\n\t\t\t\tSubmit\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default AddTodoForm;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleComplete,deleteTodo } from '../redux/todoSlice';\r\nconst TodoItem = ({ id, title, completed }) => {\r\n\t// this will add dispatch actions \r\n\t// Dispatching actions in Redux is the fundamental method of updating a Redux store's state . Actions are used to store relevant information for the state , and they reach the store through the dispatch() method available on the store object. You can use either store. dispatch() directly or this. props.\r\n\tconst dispatch=useDispatch(); \r\n\tconst handleDeleteClick=()=>{\r\n\t\tdispatch(deleteTodo({id:id}))\r\n\t}\r\n\tconst handleCompleteClick=()=>{\r\n\t\t// our reducer needs to know the id of the todo we are changing and the state of the completed variable\r\n\t\t// completed:!completed means that if it is true it will give reducer a false value and vice versa\r\n\t\tdispatch(\r\n\t\t\ttoggleComplete({id:id, completed:!completed}, console.log(\"user entered \"+completed))\r\n\t\t);\r\n\t};\r\n\treturn (\r\n\t\t<li className={`list-group-item ${completed && 'list-group-item-success'}`}>\r\n\t\t\t<div className='d-flex justify-content-between'>\r\n\t\t\t\t<span className='d-flex align-items-center'>\r\n\t\t\t\t\t<input type='checkbox' className='mr-3' checked={completed}\r\n\t\t\t\t\tonChange={handleCompleteClick}\r\n\t\t\t\t\t></input>\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</span>\r\n\t\t\t\t<button className='btn btn-danger'\r\n\t\t\t\tonClick={handleDeleteClick}\r\n\t\t\t\t>Delete</button>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default TodoItem;\r\n","// The useEffect Hook allows you to perform side effects in your components. Some examples of side effects are: fetching data, directly updating the DOM, and timers. useEffect accepts two arguments. The second argument is optional. useEffect(<function>, <dependency>)\r\nimport React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { useSelector } from 'react-redux';\r\n// import { getTodos } from '../redux/todoSlice';\r\n// The useSelector hooks allow you to extract data or the state from the Redux store using a selector function. It is equivalent to the mapStateToProps argument used in the connect() function conceptually.\r\n// useSelector and useDispatch are a set of hooks to use as alternatives to the existing connect() higher-order component.\r\n\r\nconst TodoList = () => {\r\n\tconst todos=useSelector((state)=>state.todos);\r\n\r\n\treturn (\r\n\t\t<ul className='list-group'>\r\n\t\t\t{todos.map((todo) => (\r\n\t\t\t\t<TodoItem id={todo.id} title={todo.title} completed={todo.completed} />\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nconst TotalCompleteItems = () => {\r\n  const completedTodos = useSelector((state) =>\r\n    state.todos.filter((todo) => todo.completed === true)\r\n  );\r\n  return (\r\n    <h4 className=\"mt-3\">Total Complete Items: {completedTodos.length}</h4>\r\n  );\r\n};\r\n\r\nexport default TotalCompleteItems;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport AddTodoForm from './components/AddTodoForm';\r\nimport TodoList from './components/TodoList';\r\nimport TotalCompleteItems from './components/TotalCompleteItems';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<div className='container bg-white p-4 mt-5'>\r\n\t\t\t<h1>My Todo List</h1>\r\n\t\t\t<AddTodoForm />\r\n\t\t\t<TodoList />\r\n\t\t\t<TotalCompleteItems />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport todoReducer from './todoSlice'\r\nexport default configureStore({\r\n    // Reducers are functions that take the current state and an action as arguments, and return a new state result.\r\n    reducer:{\r\n        todos:todoReducer,\r\n    },\r\n});","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n// The <Provider> component makes the Redux store available to any nested components that need to access the Redux store\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}